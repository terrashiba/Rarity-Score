@page "/"
@using Microsoft.Extensions.Logging
@using System.Globalization
@using RarityScore.Configuration
@inject ILogger<Index> Logger
@inject HttpClient Http
<div class="row"><h1>Check Rarity</h1></div>

<hr />
<div class="row">
    <div class="col-lg-4">
        <a href="@contractSite" target="_blank" class="float-right">
            <img style="max-height: 200px" class=" img-thumbnail  " src="@contractPicture"/>
        </a>
    </div>
    <EditForm style="margin:10px 0 10px 0" class="col-lg-4" Model="@checkRarityFormModel" OnValidSubmit="@HandleValidSubmit" >
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="contract">NFT Contract Address:</label>

        
            @*<InputText id="contract" class="form-control" disabled @bind-Value="checkRarityFormModel.WalletAddress"/>*@
            <InputSelect style="width:100%" class="" @bind-Value="contractName" bind-Value:event="@ContractAddressChanged()">
                @foreach (var contract in contractAddresses)
                {
                    <option class="">@contract.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="terranautId">Terranaut Id:</label>
            <br />
            <InputNumber id="terranautId" @bind-Value="checkRarityFormModel.TerranautId" />
        </div>
        <button class="btn btn-info" disabled="@buttonDisables" type="submit">Submit</button>
    </EditForm>
    <div class="col-lg-4">
        <a href="@contractSite" target="_blank" class="float-left">
            <img style="max-height: 200px" class=" img-thumbnail  " src="@contractPicture"/>
        </a>
    </div>
    
</div>
<hr />
@if (mappedMetadataResult != null)
{
    <div class="row">
        <div class="card bg-light col-lg-12" style="width: 22rem">
            <div class="card-body">
                <h3 class="card-title">Rarity score</h3>
            
                <div class="row">
                    <div class="col-lg-4">
                    
                        <img class="img-thumbnail" src="@(mappedMetadataResult.ImageUrl)" />

                        <div class="alert alert-dark" role="alert" style="margin-top:20px;">
                            <strong>Average Rarity: </strong>  @(mappedMetadataResult.AverageTraitsPercent.ToString("F2", CultureInfo.InvariantCulture) + "%" )
                            
                        </div>
                        <div class="alert alert-info" role="alert">
                            <strong>Rarest Trait: </strong>  
                            <br />
                            @mappedMetadataResult.RarestTraitName -  @(mappedMetadataResult.RarestTraitPercent.ToString("F2", CultureInfo.InvariantCulture) + "%" + $" ({mappedMetadataResult.RarestTraitCount}/{mappedMetadataResult.RarestTraitTotalCount})" )
                        </div>
                        <div class="alert alert-success" role="alert">
                            <strong >NFT Score: @(mappedMetadataResult.TotalRarityScore.ToString("F2", CultureInfo.InvariantCulture))</strong>
                            <span class="badge badge-secondary float-xl-right "> <span class="oi oi-caret-top text-success"></span> Bigger is better</span>

                        </div>
                        <div class="alert alert-warning" role="alert">
                            <strong>Rank: @mappedMetadataResult.Rank / @mappedMetadataResult.MaximumRank</strong>
                            <span class="badge badge-secondary float-xl-right"> <span class="oi oi-caret-bottom text-warning"></span> Smaller is better</span>

                        </div>
                    </div>
                    <div class="col-lg-8">
                        <ul class="list-group">
                           <h4>Properties</h4> 
                            @foreach (var metadata in mappedMetadataResult.Metadata)
                            {
                                <li class="list-group-item align-content-center">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <span class="badge badge-light">@metadata.PropertyType</span>
                                        </div>
                                        <div class="col-md-4 text-center">
                                            <span class="text-primary font-weight-bolder">@metadata.Name</span>
                                        </div>
                                        <div class="col-md-5  float-right text-right">
                                            <span class="badge badge-secondary float-right ">@metadata.Rarity %</span>

                                            <span class="badge badge-warning float-right">Floor price for trait: 
                                                @(metadata.FloorPrice.ToString("F2", CultureInfo.InvariantCulture) + " Luna" )
                                            </span>
                                        </div>
                                        <div class="col-md-12">

                                            <div class="progress ">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: @(Math.Abs(metadata.Rarity - 100))%" aria-valuenow="@(Math.Abs(metadata.Rarity - 100))" aria-valuemin="0" aria-valuemax="100">
                                                    @metadata.TotalCount
                                                </div>
                                                <div class="progress-bar bg-primary" role="progressbar" style="width: @(metadata.Rarity)%" aria-valuenow="@metadata.Rarity" aria-valuemin="0" aria-valuemax="100">
                                                    @metadata.Count
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </li>

                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        </div>
}
@code {
    private List<ContractAddressesConfig> contractAddresses = new();
    private string contractName ;
    private string contractPicture ;
    private string contractSite ;

    private CheckRarityFormModel checkRarityFormModel = new();
    private MetadataResult mappedMetadataResult;
    
    private bool buttonDisables;

    protected override async Task OnInitializedAsync()
    {
        contractAddresses = await Http.GetFromJsonAsync<List<ContractAddressesConfig>>("contracts/nftcontracts.json");
        
        contractName = contractAddresses.First().Name;
        contractPicture = contractAddresses.First().PictureUrl;
        contractSite = contractAddresses.First().SiteUrl;

        checkRarityFormModel.WalletAddress = contractAddresses.First().Address;
    }

    private Task ContractAddressChanged()
    {
        if (contractAddresses != null && contractAddresses.Any())
        {
            Logger.LogInformation($"Contract Changed: {contractName}");
            if (!string.IsNullOrEmpty(contractName))
            {
                checkRarityFormModel.WalletAddress = contractAddresses.First(c => c.Name == contractName).Address;
                contractPicture = contractAddresses.First(c => c.Name == contractName).PictureUrl;
                contractSite = contractAddresses.First(c => c.Name == contractName).SiteUrl;
                //mappedMetadataResult = null;
            }
        }
        return Task.CompletedTask;
    }

    public async Task<decimal> GetTraitsFloorPrice()
    {
        foreach (var mappedMetadata in mappedMetadataResult.Metadata)
        {
            // Get floor price per trait from randomearth.io
            var sortString = "sort=price.asc";
            var randomearthUrl = $"https://randomearth.io/api/items?collection_addr={checkRarityFormModel.WalletAddress}&{sortString}&page=1&Face_={mappedMetadata.Name}";

            HttpClient httpClient = Http;
            try
            {
                
                var marketResult = await httpClient.GetFromJsonAsync<RandomearthModels>(randomearthUrl);
                if (marketResult != null && marketResult.Items.Any())
                {
                    var price = marketResult.Items.FirstOrDefault()?.Price;
                    if (price != null) mappedMetadata.FloorPrice = (decimal) price/100000;
                }
            }
            catch (Exception e)
            {
                Logger.LogInformation(e.Message);
            }

            this.StateHasChanged();
        }
        return 0;

    }

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
        buttonDisables = true;
        try
        {
            var terraUrl = $"https://lcd.terra.dev/wasm/contracts/{checkRarityFormModel.WalletAddress}/store?query_msg=%7B%22nft_additional_info%22:%7B%22token_id%22:%22{checkRarityFormModel.TerranautId}%22%7D%7D";

            var terraContractResult = await Http.GetFromJsonAsync<TerraContractResult>(terraUrl);
            mappedMetadataResult = MetadataResult.MapTerraResult(terraContractResult);
             
            // Get all attributes
            var jsonAttributes = await Http.GetFromJsonAsync<Dictionary<string, Dictionary<string, Dictionary<string, decimal>>>>("attributes/attributes.json");
            var attributes = AttributesResult.MapAttributes(jsonAttributes);
            
            //Add Rank 
            var jsonRank = await Http.GetFromJsonAsync<List<TerranautRank>>("contracts/terranauts/rarity_scores.json");
            // Add rarity to the list
            mappedMetadataResult = MetadataResult.MapRarity(checkRarityFormModel.TerranautId, mappedMetadataResult, attributes, jsonRank);
            

            Task.Run(() => GetTraitsFloorPrice());
        }
        finally
        {
             buttonDisables = false;
             this.StateHasChanged();
        }
        
    }

}